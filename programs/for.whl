DEF "for_loop" 3
; Recursive For-Loop Implementation with Delay
; Expects 3 arguments: iterations (int), string_to_print (string), delay (int)

; -- Base Case --
; The cursor starts at index 0 (iterations)
CMP 0       ; Compare iterations > 0. Sets CMPFLAG.
JIZ 14      ; If iterations <= 0 (CMPFLAG is false), jump 14 instructions to RET.

; -- Recursive Step --
MOVVW 1     ; Move cursor to string_to_print (index 1)
OUT         ; Print the string

MOVVW 1     ; Move cursor to delay (index 2)
ADDARG      ; Add 'delay' as an argument for the DEL instruction
DEL %       ; Delay for the specified amount of time

MOVVW -2    ; Move cursor back to iterations (index 0)
ADD -1      ; Decrement iterations (iterations = iterations - 1)

; Prepare arguments for the recursive call
ADDARG      ; Add new 'iterations' as the first argument
MOVVW 1     ; Move cursor to "string_to_print"
ADDARG      ; Add "string_to_print" as the second argument
MOVVW 1     ; Move cursor to 'delay'
ADDARG      ; Add 'delay' as the third argument

CALL "for_loop" 3 ; Recurse

RET         ; Return from function

; --- Example Usage ---

NEWV 5                  ; Create variable for iterations
NEWV "Looping..."       ; Create variable for the string
NEWV 500                ; Create variable for delay (500ms)

ADDARG                  ; Add '5' as the first argument
MOVVW 1                 ; Move cursor to "Looping..."
ADDARG                  ; Add "Looping..." as the second argument
MOVVW 1                 ; Move cursor to '500'
ADDARG                  ; Add '500' as the third argument

CALL "for_loop" 3       ; Call the function
